import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from gtts import gTTS
import os

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω—ã –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

openai.api_key = OPENAI_API_KEY

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
async def translate_text(text, target_lang="—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫"):
    prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang}: {text}"
    response = openai.ChatCompletion.create(
        model="gpt-4.1-mini",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π—Å–∫–∏–µ –±—É–∫–≤—ã ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π)
    if any('\u0E00' <= ch <= '\u0E7F' for ch in user_text):
        target = "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"
        voice_lang = "ru"
    else:
        target = "—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫"
        voice_lang = "th"

    translation = await translate_text(user_text, target)

    # –û–∑–≤—É—á–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    tts = gTTS(text=translation, lang=voice_lang)
    tts.save("result.mp3")

    await update.message.reply_text(translation)
    await update.message.reply_voice(voice=open("result.mp3", "rb"))

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ üá∑üá∫ ‚Üî üáπüá≠. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ.")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
